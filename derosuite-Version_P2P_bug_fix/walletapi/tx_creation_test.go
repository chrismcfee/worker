// Copyright 2017-2018 DERO Project. All rights reserved.
// Use of this source code in any form is governed by RESEARCH license.
// license can be found in the LICENSE file.
// GPG: 0F39 E425 8C65 3947 702A  8234 08B2 0360 A03A 9DE8
//
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
// THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
// STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF
// THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

package walletapi

import "os"
import "fmt"
import "testing"
import "bytes"
import "crypto/rand"
import "path/filepath"
import "encoding/hex"
import "encoding/binary"
import "runtime/pprof"

import "github.com/deroproject/derosuite/globals"
import "github.com/deroproject/derosuite/crypto"
import "github.com/deroproject/derosuite/crypto/ringct"
import "github.com/deroproject/derosuite/transaction"

func init() {
	globals.Init_rlog()
}

// this will test that the keys are placed properly and thus can be decoded by recievers
func Test_Creation_TX(t *testing.T) {

	temp_db := filepath.Join(os.TempDir(), "dero_temporary_test_wallet.db")

	os.Remove(temp_db)

	w, err := Create_Encrypted_Wallet(temp_db, "QWER", *crypto.RandomScalar())
	if err != nil {
		t.Fatalf("Cannot create encrypted wallet, err %s", err)
	}

	defer os.Remove(temp_db) // cleanup after test
	//sender,_ := Generate_Keys_From_Random() // we have a single sender

	var receivers []*Account

	randomBytes := make([]byte, 4)

	for loop := 0; loop < 10; loop++ { // run the test randomly 200 times
		rand.Read(randomBytes)
		random_inputs := 1 + (binary.LittleEndian.Uint32(randomBytes) % 20) //minimum 1 input is necessary
		rand.Read(randomBytes)
		random_outputs := 1 + (binary.LittleEndian.Uint32(randomBytes) % 20) //minimum 1 output is necessary

		if loop == 0 {
			random_inputs = 100
		}

		if loop == 1 {
			random_outputs = 200 // randomly place 200 outputs in single tx
		}

		if loop == 2 {
			random_inputs = 500
			random_outputs = 2
		}

		txw := TX_Wallet_Data{WAmount: 4000000000000}
		txw.TXdata.Index_Global = 739
		txw.TXdata.Height = 730
		txw.WKey.Destination = crypto.HexToKey("dbdfd2a3e9da6911b0a3e37e8e448f2de2477f81760585c2f197736bac127e0f")
		txw.WKey.Mask = crypto.HexToKey("01e4e85ab0b5e30dd86b5356f0f6b4177738b9e6b32041c4e4781a2f26083101")
		txw.WKimage = crypto.HexToKey("d8fb3b4260aea6582400a5f48244ff3f7c4dc36420698e3decc5d28ba04733c2")
		txw.TXdata.InKey.Destination = crypto.HexToKey("ed0da9e74d240088a07909ea354b8d140b753642e25495e0931b4623b25ff523")
		txw.TXdata.InKey.Mask = crypto.HexToKey("dbddab6c6b3063074e7cfd1a7f83f184ad78e92c8ff25118c0ed4edc77015948")

		var outs []ringct.Output_info
		for i := uint32(0); i < random_outputs; i++ {
			r, _ := Generate_Keys_From_Random()
			receivers = append(receivers, r)

			out := ringct.Output_info{Public_Spend_Key: receivers[i].GetAddress().SpendKey,
				Public_View_Key: receivers[i].GetAddress().ViewKey}

			if i == 0 { // balance the outputs
				out.Amount = uint64(random_inputs) * txw.WAmount
			}
			outs = append(outs, out) // fill outs with random address
		}

		var ins []ringct.Input_info
		for i := uint32(0); i < random_inputs; i++ {

			ins = append(ins, ringct.Input_info{Amount: txw.WAmount, Key_image: crypto.Hash(txw.WKimage), Sk: txw.WKey, Index_Global: txw.TXdata.Index_Global})

			//now we must the ring members
			ins[i].Ring_Members = append(ins[i].Ring_Members, txw.TXdata.Index_Global)
			ins[i].Pubs = append(ins[i].Pubs, txw.TXdata.InKey)

			// lets add 5 ring members randomly
			for j := uint64(0); j < 5; j++ {
				ins[i].Ring_Members = append(ins[i].Ring_Members, txw.TXdata.Index_Global+j+1)
				ins[i].Pubs = append(ins[i].Pubs, ringct.CtKey{Destination: *crypto.RandomScalar(), Mask: *crypto.RandomScalar()})
			}
		}

		// 739th main net consumed output
		var payment_id []byte

		if loop%2 == 0 {
			payment_id = make([]byte, 32, 32) // test 32 byte payment id
		} else {
			payment_id = make([]byte, 8, 8) // make encrypted payment ID
		}

		if loop%3 == 0 {
			payment_id = make([]byte, 0, 0) // test with out payment id
		}

		bulletproof := false
		if loop%2 == 1 {
			bulletproof = true
		}

		tx := w.Create_TX_v2(ins, outs, 0, 0, payment_id, bulletproof)

		if !tx.RctSignature.Verify() {
			t.Fatalf("TX ring signature verification failed")
		}

		// now check whether the outputs can be verified successfuly after serdes
		var tx2 transaction.Transaction
		tx2.DeserializeHeader(tx.Serialize())
		tx2.Parse_Extra()

		public_key := tx2.Extra_map[transaction.TX_PUBLIC_KEY].(crypto.Key)

		if len(payment_id) == 8 { // test whether payment ID was encrypted and decrypted successfully
			epayid := tx.PaymentID_map[transaction.TX_EXTRA_NONCE_ENCRYPTED_PAYMENT_ID].([]byte)

			derivation := crypto.KeyDerivation(&public_key, &receivers[0].Keys.Viewkey_Secret)
			payid := EncryptDecryptPaymentID(derivation, public_key, epayid)

			t.Logf("epay id %x  decrypted %x", epayid, payid)

			if !bytes.Equal(payment_id, payid) {
				t.Fatalf("8 byte encrypted payment ID missing failed")
			}

		}

		if len(payment_id) == 32 { // test full 32 byte payment id
			if !bytes.Equal(payment_id, tx.PaymentID_map[transaction.TX_EXTRA_NONCE_PAYMENT_ID].([]byte)) {
				t.Fatalf("32 byte payment ID missing, failed")
			}
		}
		for output_index := range outs {

			tx_out_to_key := tx2.Vout[output_index].Target.(transaction.Txout_to_key)
			if !receivers[output_index].Is_Output_Ours(public_key, uint64(output_index), tx_out_to_key.Key) {
				t.Fatalf("Output mismatch index %d", output_index)
			}

		}
		t.Logf("inputs %5d\toutputs %5d\t tx size %4d KB %+v", random_inputs, random_outputs, len(tx.Serialize())/1024, bulletproof)
	}

}

// this will test that the keys are placed properly and thus can be decoded by recievers
// this also forces the ring size from 2 to 10
func Test_Creation_TX_Size(t *testing.T) {

	temp_db := filepath.Join(os.TempDir(), "dero_temporary_test_wallet.db")

	os.Remove(temp_db)

	w, err := Create_Encrypted_Wallet(temp_db, "QWER", *crypto.RandomScalar())
	if err != nil {
		t.Fatalf("Cannot create encrypted wallet, err %s", err)
	}

	defer os.Remove(temp_db) // cleanup after test
	//sender,_ := Generate_Keys_From_Random() // we have a single sender

	var receivers []*Account

	randomBytes := make([]byte, 4)

	for loop := 0; loop < 1; loop++ { // run the test randomly 200 times
		rand.Read(randomBytes)
		random_inputs := 1 + (binary.LittleEndian.Uint32(randomBytes) % 20) //minimum 1 input is necessary
		rand.Read(randomBytes)
		random_outputs := 1 + (binary.LittleEndian.Uint32(randomBytes) % 20) //minimum 1 output is necessary

		random_inputs = 20 * uint32(loop+1)
		random_outputs = 2

		txw := TX_Wallet_Data{WAmount: 4000000000000}
		txw.TXdata.Index_Global = 739
		txw.TXdata.Height = 730
		txw.WKey.Destination = crypto.HexToKey("dbdfd2a3e9da6911b0a3e37e8e448f2de2477f81760585c2f197736bac127e0f")
		txw.WKey.Mask = crypto.HexToKey("01e4e85ab0b5e30dd86b5356f0f6b4177738b9e6b32041c4e4781a2f26083101")
		txw.WKimage = crypto.HexToKey("d8fb3b4260aea6582400a5f48244ff3f7c4dc36420698e3decc5d28ba04733c2")
		txw.TXdata.InKey.Destination = crypto.HexToKey("ed0da9e74d240088a07909ea354b8d140b753642e25495e0931b4623b25ff523")
		txw.TXdata.InKey.Mask = crypto.HexToKey("dbddab6c6b3063074e7cfd1a7f83f184ad78e92c8ff25118c0ed4edc77015948")

		var outs []ringct.Output_info
		for i := uint32(0); i < random_outputs; i++ {
			r, _ := Generate_Keys_From_Random()
			receivers = append(receivers, r)

			out := ringct.Output_info{Public_Spend_Key: receivers[i].GetAddress().SpendKey,
				Public_View_Key: receivers[i].GetAddress().ViewKey}

			if i == 0 { // balance the outputs
				out.Amount = uint64(random_inputs) * txw.WAmount
			}
			outs = append(outs, out) // fill outs with random address
		}

		ring_sizes := []uint64{1, 2, 3, 4, 5, 6, 7, 8, 10}

		for x := range ring_sizes {

			var ins []ringct.Input_info
			for i := uint32(0); i < random_inputs; i++ {

				ins = append(ins, ringct.Input_info{Amount: txw.WAmount, Key_image: crypto.Hash(txw.WKimage), Sk: txw.WKey, Index_Global: txw.TXdata.Index_Global})

				//now we must the ring members
				ins[i].Ring_Members = append(ins[i].Ring_Members, txw.TXdata.Index_Global)
				ins[i].Pubs = append(ins[i].Pubs, txw.TXdata.InKey)

				// lets add 5 ring members randomly
				for j := uint64(0); j < ring_sizes[x]; j++ {
					ins[i].Ring_Members = append(ins[i].Ring_Members, txw.TXdata.Index_Global+j+1)
					ins[i].Pubs = append(ins[i].Pubs, ringct.CtKey{Destination: *crypto.RandomScalar(), Mask: *crypto.RandomScalar()})
				}
			}

			// 739th main net consumed output
			var payment_id []byte

			if loop%2 == 0 {
				payment_id = make([]byte, 32, 32) // test 32 byte payment id
			} else {
				payment_id = make([]byte, 8, 8) // make encrypted payment ID
			}

			if loop%3 == 0 {
				payment_id = make([]byte, 0, 0) // test with out payment id
			}

			bulletproof := true

			tx := w.Create_TX_v2(ins, outs, 0, 0, payment_id, bulletproof)

			if !tx.RctSignature.Verify() {
				t.Fatalf("TX ring signature verification failed")
			}

			// now check whether the outputs can be verified successfuly after serdes
			var tx2 transaction.Transaction
			tx2.DeserializeHeader(tx.Serialize())
			tx2.Parse_Extra()

			public_key := tx2.Extra_map[transaction.TX_PUBLIC_KEY].(crypto.Key)

			if len(payment_id) == 8 { // test whether payment ID was encrypted and decrypted successfully
				epayid := tx.PaymentID_map[transaction.TX_EXTRA_NONCE_ENCRYPTED_PAYMENT_ID].([]byte)

				derivation := crypto.KeyDerivation(&public_key, &receivers[0].Keys.Viewkey_Secret)
				payid := EncryptDecryptPaymentID(derivation, public_key, epayid)

				//t.Logf("epay id %x  decrypted %x", epayid, payid)

				if !bytes.Equal(payment_id, payid) {
					t.Fatalf("8 byte encrypted payment ID missing failed")
				}

			}

			if len(payment_id) == 32 { // test full 32 byte payment id
				if !bytes.Equal(payment_id, tx.PaymentID_map[transaction.TX_EXTRA_NONCE_PAYMENT_ID].([]byte)) {
					t.Fatalf("32 byte payment ID missing, failed")
				}
			}
			for output_index := range outs {

				tx_out_to_key := tx2.Vout[output_index].Target.(transaction.Txout_to_key)
				if !receivers[output_index].Is_Output_Ours(public_key, uint64(output_index), tx_out_to_key.Key) {
					t.Fatalf("Output mismatch index %d", output_index)
				}

			}
			t.Logf("inputs %5d\toutputs %5d\t  ring size %5d tx size %4d KB %+v", random_inputs, random_outputs, ring_sizes[x], len(tx.Serialize())/1024, bulletproof)
		}
	}

}

/* Related logs here for improvig the test here
 *
[wallet dERoiV]: integrated_address
Random payment ID: <0cbd6e050cf3b73c>
Matching integrated address: dERijfr9y7XhWkdEPp17RJLXVoHkr2ucMdEbgGgpskhLb33732LBifWMCZhPga3EcjXoYqfM9jRv3W3bnWUSpdmKL24FBjG6ctTAEg1jrhDHh
[wallet dERoiV]: address
dERoiVavtPjhWkdEPp17RJLXVoHkr2ucMdEbgGgpskhLb33732LBifWMCZhPga3EcjXoYqfM9jRv3W3bnWUSpdmK5Jur1PhN6P
[wallet dERoiV]: help

[wallet dERoiV]: transfer dERijfr9y7XhWkdEPp17RJLXVoHkr2ucMdEbgGgpskhLb33732LBifWMCZhPga3EcjXoYqfM9jRv3W3bnWUSpdmKL24FBjG6ctTAEg1jrhDHh 1
Wallet password:
Sending 1.000000000000.  The transaction fee is 0.049197120000
Is this okay?  (Y/Yes/N/No): y
Transaction successfully submitted, transaction <ea551b02b9f1e8aebe4d7b1b7f6bf173d76ae614cb9a066800773fee9e226fd7>
You can check its status by using the `show_transfers` command.
[wallet dERoiV]: get_tx_key ea551b02b9f1e8aebe4d7b1b7f6bf173d76ae614cb9a066800773fee9e226fd7
unknown command: ge_tx_key ea551b02b9f1e8aebe4d7b1b7f6bf173d76ae614cb9a066800773fee9e226fd7
[wallet dERoiV]: get_tx_key ea551b02b9f1e8aebe4d7b1b7f6bf173d76ae614cb9a066800773fee9e226fd7
Wallet password:
Tx key: af7b5a4e75410d585e7faeb254811ea1274f6d20205205213c79655fe3958c07
Height 2175, transaction <31b019dba022b29f8342f71c4ede91fea8b4236469786ae55f131af3432d3989>, received 31.661910734197
Height 2175, transaction <ea551b02b9f1e8aebe4d7b1b7f6bf173d76ae614cb9a066800773fee9e226fd7>, received 7.862704628648
*  Height 2175, transaction <ea551b02b9f1e8aebe4d7b1b7f6bf173d76ae614cb9a066800773fee9e226fd7>, received 1.000000000000
Height 2175, transaction <ea551b02b9f1e8aebe4d7b1b7f6bf173d76ae614cb9a066800773fee9e226fd7>, spent 8.903560733970
Height 2175, transaction <ea551b02b9f1e8aebe4d7b1b7f6bf173d76ae614cb9a066800773fee9e226fd7>, spent 0.008341014678

*/
// this will test that the keys are placed properly and thus can be decoded by recievers
func Test_Creation_TX_Encrypted_PaymentID_check(t *testing.T) {
	temp_db := filepath.Join(os.TempDir(), "dero_temporary_test_wallet.db")

	os.Remove(temp_db)

	w, err := Create_Encrypted_Wallet(temp_db, "QWER", crypto.HexToKey("aebcbe93d8c386f954bbc2122d9d6423b7e5b77a6ad31c6a43855e15b9760c0d"))
	if err != nil {
		t.Fatalf("Cannot create encrypted wallet, err %s", err)
	}

	defer os.Remove(temp_db) // cleanup after test

	tx_created_by_oldwallet_hex := ""
	tx_created_by_oldwallet, _ := hex.DecodeString(tx_created_by_oldwallet_hex)

	var tx transaction.Transaction

	err = tx.DeserializeHeader(tx_created_by_oldwallet)
	if err != nil {
		t.Fatalf("TX could not be deserialized. This needs to be fixed urgently as encrypted payment ID functionalyi is broken")
	}

	// the tx is sending payment to itself with encrypted payment
	tx.Parse_Extra()

	public_key := tx.Extra_map[transaction.TX_PUBLIC_KEY].(crypto.Key)

	payment_id := "0cbd6e050cf3b73c"

	// lets locate and decode payment id, see whether it matches with expected value
	epayid := tx.PaymentID_map[transaction.TX_EXTRA_NONCE_ENCRYPTED_PAYMENT_ID].([]byte)

	derivation := crypto.KeyDerivation(&public_key, &w.account.Keys.Viewkey_Secret)
	payid := EncryptDecryptPaymentID(derivation, public_key, epayid)

	t.Logf("epay id %x  decrypted %x  original payment ID %s ", epayid, payid, payment_id)

	if payment_id != fmt.Sprintf("%x", payid) {
		t.Fatalf("8 byte encrypted payment ID missing failed, Critical, encrypted payment Id failed")
	}
}

// this will  create the transaction and benchmark the verification times
// this also forces the ring size from 2 to 10
func benchmark_TX_Verification(b *testing.B, num_inputs uint32, num_outputs uint32, num_ring_size int) (tx *transaction.Transaction) {

	temp_db := filepath.Join(os.TempDir(), "dero_temporary_test_wallet.db")

	os.Remove(temp_db)

	w, err := Create_Encrypted_Wallet(temp_db, "QWER", *crypto.RandomScalar())
	if err != nil {
		b.Fatalf("Cannot create encrypted wallet, err %s", err)
	}

	defer os.Remove(temp_db) // cleanup after test
	//sender,_ := Generate_Keys_From_Random() // we have a single sender

	var receivers []*Account

	randomBytes := make([]byte, 4)

	rand.Read(randomBytes)
	random_inputs := 1 + (binary.LittleEndian.Uint32(randomBytes) % 20) //minimum 1 input is necessary
	rand.Read(randomBytes)
	random_outputs := 1 + (binary.LittleEndian.Uint32(randomBytes) % 20) //minimum 1 output is necessary

	random_inputs = num_inputs
	random_outputs = num_outputs

	txw := TX_Wallet_Data{WAmount: 4000000000000}
	txw.TXdata.Index_Global = 739
	txw.TXdata.Height = 730
	txw.WKey.Destination = crypto.HexToKey("dbdfd2a3e9da6911b0a3e37e8e448f2de2477f81760585c2f197736bac127e0f")
	txw.WKey.Mask = crypto.HexToKey("01e4e85ab0b5e30dd86b5356f0f6b4177738b9e6b32041c4e4781a2f26083101")
	txw.WKimage = crypto.HexToKey("d8fb3b4260aea6582400a5f48244ff3f7c4dc36420698e3decc5d28ba04733c2")
	txw.TXdata.InKey.Destination = crypto.HexToKey("ed0da9e74d240088a07909ea354b8d140b753642e25495e0931b4623b25ff523")
	txw.TXdata.InKey.Mask = crypto.HexToKey("dbddab6c6b3063074e7cfd1a7f83f184ad78e92c8ff25118c0ed4edc77015948")

	var outs []ringct.Output_info
	for i := uint32(0); i < random_outputs; i++ {
		r, _ := Generate_Keys_From_Random()
		receivers = append(receivers, r)

		out := ringct.Output_info{Public_Spend_Key: receivers[i].GetAddress().SpendKey,
			Public_View_Key: receivers[i].GetAddress().ViewKey}

		if i == 0 { // balance the outputs
			out.Amount = uint64(random_inputs) * txw.WAmount
		}
		outs = append(outs, out) // fill outs with random address
	}

	ring_size := uint64(num_ring_size)

	var ins []ringct.Input_info
	for i := uint32(0); i < random_inputs; i++ {

		ins = append(ins, ringct.Input_info{Amount: txw.WAmount, Key_image: crypto.Hash(txw.WKimage), Sk: txw.WKey, Index_Global: txw.TXdata.Index_Global})

		//now we must the ring members
		ins[i].Ring_Members = append(ins[i].Ring_Members, txw.TXdata.Index_Global)
		ins[i].Pubs = append(ins[i].Pubs, txw.TXdata.InKey)

		// lets add 5 ring members randomly
		for j := uint64(0); j < ring_size; j++ {
			ins[i].Ring_Members = append(ins[i].Ring_Members, txw.TXdata.Index_Global+j+1)
			ins[i].Pubs = append(ins[i].Pubs, ringct.CtKey{Destination: *crypto.RandomScalar(), Mask: *crypto.RandomScalar()})
		}
	}

	// 739th main net consumed output
	var payment_id []byte

	bulletproof := true

	tx = w.Create_TX_v2(ins, outs, 0, 0, payment_id, bulletproof)

	return tx

}

/*
func Benchmark_TX_Verification_inputs_10_outputs_2_mixin_7(b *testing.B){
	benchmark_TX_Verification(b,10,2,7)
}
func Benchmark_TX_Verification_inputs_10_outputs_4_mixin_7(b *testing.B){
	benchmark_TX_Verification(b,10,4,7)
}
func Benchmark_TX_Verification_inputs_10_outputs_7_mixin_7(b *testing.B){
	benchmark_TX_Verification(b,10,7,7)
}
func Benchmark_TX_Verification_inputs_10_outputs_9_mixin_7(b *testing.B){
	benchmark_TX_Verification(b,10,9,7)
}
func Benchmark_TX_Verification_inputs_10_outputs_11_mixin_7(b *testing.B){
	benchmark_TX_Verification(b,10,11,7)
}
*/

/*
func Benchmark_TX_Verification(b *testing.B){

	cpufile,err := os.Create("/tmp/cpuprofile.prof")
			if err != nil{

			}
			if err := pprof.StartCPUProfile(cpufile); err != nil {
            }
        	defer pprof.StopCPUProfile()

        	input := uint32(20)
        	output := uint32(2)
        	mixin := 7

				b.Run(fmt.Sprintf("in %d/ out %d/mixin %d", input, output,mixin), func(b *testing.B) {
					tx := benchmark_TX_Verification(b,input,output,mixin)
					b.Logf("tx size %d bytes    %d KB", len(tx.Serialize()), len(tx.Serialize())/1024)
	b.ResetTimer()
	for n := 0; n < b.N; n++ {
		if !tx.RctSignature.Verify() {
			b.Fatalf("TX ring signature verification failed")
		}
	}
		})



}
*/

// verify and confirm few parameters for the network
func Benchmark_TX_Verification(b *testing.B) {

	cpufile, err := os.Create("/tmp/cpuprofile.prof")
	if err != nil {

	}
	if err := pprof.StartCPUProfile(cpufile); err != nil {
	}
	defer pprof.StopCPUProfile()

	for input := uint32(10); input < 400; input += 50 {
		for output := uint32(1); output < 9; output += 2 {
			for mixin := 5; mixin < 15; mixin += 3 {
				b.Run(fmt.Sprintf("in %d/ out %d/mixin %d", input, output, mixin), func(b *testing.B) {
					benchmark_TX_Verification(b, input, output, mixin)
				})
			}
		}
	}
}

/*  specific testing if required
// inputs
func Benchmark_TX_Verification_inputs_10_outputs_2_mixin_8(b *testing.B){
	benchmark_TX_Verification(b,10,2,8)
}
*/
